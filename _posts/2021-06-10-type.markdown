---
layout: post
title: "[TypeScript] 타입스크립트의 기본 타입"
subtitle: "타입스크립트의 기본 타입"
categories: "study"
tags: "type"
---

타입스크립트는 변수나 함수와 같은 자바스크립트 코드에 타입을 정의할 수 있습니다.

타입스크립트 기본 타입 12가지

- Boolean
- Number
- String
- Object
- Array
- Tuple
- Enum
- Any
- Void
- Null
- Undefined
- Never

# String

```typescript
let str: string = "hi";
```

> 위와 같이 `:`를 이용해서 자바스크립트 코드에 타입을 정의하는 방식을 **타입표기(Type Annotation)** 라고 합니다.

<br >

# Number

```typescript
let num: number = 10;
```

<br>

# Boolean

```typescript
let isToggle: boolean = false;
```

<br>

# Array

```typescript
let arr: number[] = [1, 2, 3];
```

아니면 제네릭을 사용할 수 있습니다.

```typescript
let arr: Array<number> = [1, 2, 3];
```

<br>

# Tuple

튜블은 배열의 길이가 고정되고 각 요소의 타입이 지정되어 있는 배열 형식을 의미합니다.

```typescript
let arr: [string, number] = ["h1", 10];
```

정의하지 않은 타입, 인덱스로 접근할 경우 오류가 납니다.

```typescript
arr[1].concat("!"); // Error, 'number' does not have 'concat'
arr[5] = "hello"; // Error, Property '5' does not exist on type '[string, number]'.
```

<br>

# Enum

Enum은 C,Java와 같은 다른 언어에서 흔하게 쓰이는 타입으로 특정 값(상수)들의 집합을 의미합니다.

```typescript
enum Avengers {
  Capt,
  IronMan,
  Thor,
}

let hero: Avengers = Avengers.Capt; // 0
```

<br>

# Any

모든 타입을 허용한다는 의미를 갖고 있습니다.

```typescript
let str: any = "hi";
let num: any = 10;
let arr: any = ["a", 2, true];
```

<br>

# Void

변수에는 `undefined`와 `null`만 할당하고, 함수에는 반환 값을 설정할 수 없는 타입입니다.

```typescript
let unuseful: void = undefined;
function notuse(): void {
  console.log("void");
}
```

<br>

# Never

함수의 끝에 절대 도달하지 않는다는 의미를 지닌 타입입니다.

```typescript
// 이 함수는 절대 함수의 끝까지 실행되지 않는다는 의미
function neverEnd(): never {
  while (true) {}
}
```
